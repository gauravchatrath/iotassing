AWSTemplateFormatVersion: 2010-09-09
Description: IOT testing
Parameters:
  S3BucketName:
    Description: S3 Bucket in the same region where you have put the zip for the Lambda.
    Type: String
    ConstraintDescription: Must be an existing S3 Bucket in the same region.
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
Resources:
  IOTtable: 
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions: 
        - 
          AttributeName: "deviceId"
          AttributeType: "S"
        - 
          AttributeName: "name"
          AttributeType: "S"
        - 
          AttributeName: "activationcode"
          AttributeType: "N"
        - 
          AttributeName: "email"
          AttributeType: "N"
      KeySchema: 
        - 
          AttributeName: "deviceId"
          KeyType: "HASH"
        - 
          AttributeName: "name"
          KeyType: "RANGE"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "iotCatalog"
      GlobalSecondaryIndexes: 
        - 
          IndexName: "myGSI"
          KeySchema: 
            - 
              AttributeName: "activationcode"
              KeyType: "HASH"
            - 
              AttributeName: "name"
              KeyType: "RANGE"
          Projection: 
            NonKeyAttributes: 
              - "deviceId"
              - "email"
            ProjectionType: "INCLUDE"
          ProvisionedThroughput: 
            ReadCapacityUnits: "5"
            WriteCapacityUnits: "5"
        - 
          IndexName: "myGSI2"
          KeySchema: 
            - 
              AttributeName: "email"
              KeyType: "HASH"
            - 
              AttributeName: "activationcode"
              KeyType: "RANGE"
          Projection: 
            NonKeyAttributes: 
              - "deviceId"
              - "name"
            ProjectionType: "INCLUDE"
          ProvisionedThroughput: 
            ReadCapacityUnits: "5"
            WriteCapacityUnits: "5"
      LocalSecondaryIndexes: 
        - 
          IndexName: "myLSI"
          KeySchema: 
            - 
              AttributeName: "deviceId"
              KeyType: "HASH"
            - 
              AttributeName: "activationcode"
              KeyType: "RANGE"
          Projection: 
            NonKeyAttributes: 
              - "name"
              - "email"
            ProjectionType: "INCLUDE"
  LambdaGlobalIoTProvisioningRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/service-role/AWSIoTThingsRegistration'
      Policies:
        - PolicyName:
            'Fn::Join':
              - '-'
              - - LambdaGlobalIoTProvisioningPolicy
                - Ref: 'AWS::Region'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'iot:DescribeEndpoint'
                  - 'iot:CreateKeysAndCertificate'
                  - 'iot:AttachPolicy'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:PutItem'
                Resource: '*'
      Path: /
      RoleName:
        'Fn::Join':
          - '-'
          - - LambdaGlobalIoTProvisioningRole
            - Ref: 'AWS::Region'
  Devicecreation:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role:
        'Fn::GetAtt':
          - LambdaGlobalIoTProvisioningRole
          - Arn
      Code:
        S3Bucket:
          Ref: S3BucketName
        S3Key: iotdevicecreation.zip
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: '60'
  Deviceactivation:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role:
        'Fn::GetAtt':
          - LambdaGlobalIoTProvisioningRole
          - Arn
      Code:
        S3Bucket:
          Ref: S3BucketName
        S3Key: iotdeviceactivation.zip
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: '60'      
      
  LambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName:
        'Fn::GetAtt':
          - Deviceactivation
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        'Fn::Join':
          - ''
          - - 'arn:aws:execute-api:'
            - Ref: 'AWS::Region'
            - ':'
            - Ref: 'AWS::AccountId'
            - ':'
            - Ref: IoTApi
            - /*
  IoTApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Body:
        swagger: '2.0'
        info:
          version: '2018-03-16T15:33:58Z'
          title: IoT API
        basePath: /
        schemes:
          - https
        paths:
          /Deviceactivation:
            post:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                uri:
                  'Fn::Join':
                    - ''
                    - - 'arn:aws:apigateway:'
                      - Ref: 'AWS::Region'
                      - ':lambda:path/2015-03-31/functions/'
                      - 'Fn::GetAtt':
                          - Deviceactivation
                          - Arn
                      - /invocations
                responses:
                  default:
                    statusCode: '200'
                passthroughBehavior: when_no_templates
                httpMethod: POST
                requestTemplates:
                  application/json: >
                  
                    #set($allParams = $input.params())

                    {

                    "body-json" : $input.json('$'),

                    "params" : {

                    #foreach($type in $allParams.keySet())
                        #set($params = $allParams.get($type))
                    "$type" : {
                        #foreach($paramName in $params.keySet())
                        "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                            #if($foreach.hasNext),#end
                        #end
                    }
                        #if($foreach.hasNext),#end
                    #end

                    },

                    "stage-variables" : {

                    #foreach($key in $stageVariables.keySet())

                    "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
                        #if($foreach.hasNext),#end
                    #end

                    },

                    "context" : {
                        "account-id" : "$context.identity.accountId",
                        "api-id" : "$context.apiId",
                        "api-key" : "$context.identity.apiKey",
                        "authorizer-principal-id" : "$context.authorizer.principalId",
                        "caller" : "$context.identity.caller",
                        "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
                        "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
                        "cognito-identity-id" : "$context.identity.cognitoIdentityId",
                        "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
                        "http-method" : "$context.httpMethod",
                        "stage" : "$context.stage",
                        "source-ip" : "$context.identity.sourceIp",
                        "user" : "$context.identity.user",
                        "user-agent" : "$context.identity.userAgent",
                        "user-arn" : "$context.identity.userArn",
                        "request-id" : "$context.requestId",
                        "resource-id" : "$context.resourceId",
                        "resource-path" : "$context.resourcePath"
                        }
                    }
                contentHandling: CONVERT_TO_TEXT
                type: aws
        definitions:
          Empty:
            type: object
            title: Empty Schema
  IoTApiCWRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - >-
          arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  IoTApiAccount:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn:
        'Fn::GetAtt':
          - IoTApiCWRole
          - Arn
  IoTApiStage:
    DependsOn:
      - IoTApiAccount
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId:
        Ref: IoTApiDeployment
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: '*'
          LoggingLevel: INFO
          ResourcePath: /*
      RestApiId:
        Ref: IoTApi
      StageName: test
  IoTApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId:
        Ref: IoTApi
  IoTProvisioningTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: thing_name
          AttributeType: S
      KeySchema:
        - AttributeName: thing_name
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
      TableName: iot-global-provisioning
Outputs:
  IoTApiGWUrl:
    Description: Amazon API Gateway URL for global iot device provisioning.
    Value:
      'Fn::Join':
        - ''
        - - 'https://'
          - Ref: IoTApi
          - .execute-api.
          - Ref: 'AWS::Region'
          - .amazonaws.com/test/device-provisioning
